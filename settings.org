* Custom file
  #+begin_src emacs-lisp
    (setq custom-file
      (expand-file-name "custom.el" user-emacs-directory))

    (unless (file-exists-p custom-file)
      (write-region "" nil custom-file))

    (load custom-file)
  #+end_src

* Evil Configuration
  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :ensure t
      :init
        (setq evil-want-keybinding nil))

    (evil-mode 1)

    (use-package evil-collection
      :ensure t)

    (evil-collection-init)
    (use-package evil-org
      :ensure t
      :after org
      :hook (org-mode . (lambda () evil-org-mode))
      :config
        (require 'evil-org-agenda)
        (evil-org-agenda-set-keys))
  #+END_SRC

* Appearance
  #+BEGIN_SRC emacs-lisp
    (set-face-attribute 'default nil
      :font "Hack Nerd Font Mono 14")

    (set-face-attribute 'variable-pitch nil
      :font "Hack Nerd Font 14")

    (set-face-attribute 'fixed-pitch nil
      :font "Hack Nerd Font Mono 14")

    (add-to-list 'default-frame-alist '(font . "Hack Nerd Font Mono 14"))

    (require 'display-line-numbers)
    (setq display-line-numbers-type 'relative)

    (defcustom display-line-numbers-exempt-modes
      '(vterm-mode eshell-mode shell-mode term-mode ansi-term-mode)
      "Major modes on which to disable line numbers."
      :group 'display-line-numbers
      :type 'list
      :version "green")

    (defun display-line-numbers--turn-on ()
      "Turn on line numbers except for certain major modes.
    Exempt major modes are defined in `display-line-numbers-exempt-modes'."
      (unless (or (minibufferp)
                  (member major-mode display-line-numbers-exempt-modes))
        (display-line-numbers-mode)))

    (global-display-line-numbers-mode)

    (use-package rainbow-delimiters
      :ensure t
      :hook (prog-mode . rainbow-delimiters-mode))

    (use-package monokai-theme
      :ensure t)

    ;; (load-theme 'monokai t)

    (use-package ayu-theme
      :ensure t)
;;      :config (load-theme 'ayu-light t))

    (use-package solarized-theme
      :ensure t)
    (load-theme 'solarized-light t)
    (setq whitespace-style '(
      face
      trailing
      lines-tail
      tabs
      empty))
    (global-whitespace-mode t)
    (setq use-dialog-box nil)
  #+END_SRC

* Vterm
  #+begin_src emacs-lisp
    (use-package vterm
      :ensure t)
  #+end_src

* Text Editing
  #+begin_src emacs-lisp
    (setq-default indent-tabs-mode nil)
  #+end_src

* macOS specific configuration
  #+BEGIN_SRC emacs-lisp
    (setq mac-command-modifier 'super) ; make cmd key do Super
    (setq mac-option-modifier 'none) ; unbind option
    (setq mac-right-option-modifier 'meta) ; make right opt key do Meta
    (setq ns-left-option-modifier 'none) ; unbind left option
    (setq mac-control-modifier 'control) ; make Control key do Control
    (setq mac-command-modifier 'super) ; make cmd key do Super
  #+END_SRC

* Windows and buffer modification shortcuts
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "s-d") 'split-horizontally-and-move)
    (global-set-key (kbd "s-D") 'split-vertically-and-move)
    (global-set-key (kbd "s-`") 'next-buffer)
    (global-set-key (kbd "s-~") 'previous-buffer)
    (global-set-key (kbd "s-l") 'buffer-menu)
    (global-set-key (kbd "s-w") 'delete-window)
    (global-set-key (kbd "s-}") 'other-window)
    (global-set-key (kbd "s-{") 'prev-window)
    (global-set-key (kbd "s-k") 'kill-buffer)
    (global-set-key (kbd "s-r") 'revert-buffer)
    (global-set-key (kbd "s-R") 'eval-buffer)
    (global-auto-revert-mode)

    (defun prev-window()
      (interactive)
      (other-window -1))

    (defun split-horizontally-and-move()
      (interactive)
      (split-window-horizontally)
      (other-window 1))

    (defun split-vertically-and-move()
      (interactive)
      (split-window-vertically)
      (other-window 1))
  #+END_SRC

* YASnippet
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t)

    (use-package yasnippet-snippets
      :ensure t)

    (yas-global-mode t)
  #+END_SRC

* Web
** HTML
#+begin_src emacs-lisp
(use-package web-mode
  :ensure t)

(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.js\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
(defun my-web-mode-hook ()
  "Hooks for Web mode."
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
)
(add-hook 'web-mode-hook  'my-web-mode-hook)
#+end_src

* Completion
** Company Mode
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :hook (after-init . global-company-mode))
#+end_src

* Programming Languages
** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t)
  (global-flycheck-mode)
#+end_src

** LSP
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t)

  (use-package lsp-ui
    :ensure t)
#+end_src

** Elixir
   #+BEGIN_SRC emacs-lisp
   (use-package elixir-mode
     :ensure t)
   #+END_SRC emacs-lisp

   hello
emacs-
